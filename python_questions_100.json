{
  "0": {
    "question": "Что выведет print(2 + 3)?",
    "options": [
      "23",
      "5",
      "2+3",
      "Ошибка"
    ],
    "answer": "5",
    "explanation": "Оператор `+` используется для сложения чисел."
  },
  "1": {
    "question": "Какой тип данных представляет число 10?",
    "options": [
      "str",
      "float",
      "int",
      "bool"
    ],
    "answer": "int",
    "explanation": "Число 10 является целым числом, что соответствует типу `int` (integer)."
  },
  "2": {
    "question": "Как записать строку в Python?",
    "options": [
      "str = Hello",
      "str = 'Hello'",
      "str = {Hello}",
      "str = [Hello]"
    ],
    "answer": "str = 'Hello'",
    "explanation": "Строки в Python объявляются с использованием одинарных или двойных кавычек."
  },
  "3": {
    "question": "Что выведет print(type(3.14))?",
    "options": [
      "<class 'int'>",
      "<class 'float'>",
      "<class 'str'>",
      "<class 'double'>"
    ],
    "answer": "<class 'float'>",
    "explanation": "Число с десятичной точкой (например, 3.14) представляет собой тип `float` (число с плавающей запятой)."
  },
  "4": {
    "question": "Какой символ используется для комментариев в Python?",
    "options": [
      "//",
      "#",
      "/*",
      "--"
    ],
    "answer": "#",
    "explanation": "Символ `#` используется для обозначения однострочных комментариев в Python."
  },
  "5": {
    "question": "Что выведет print('Hello' + 'World')?",
    "options": [
      "Hello World",
      "HelloWorld",
      "Hello+World",
      "Ошибка"
    ],
    "answer": "HelloWorld",
    "explanation": "Оператор `+` применительно к строкам выполняет их конкатенацию (объединение)."
  },
  "6": {
    "question": "Как создать список в Python?",
    "options": [
      "list = {1, 2, 3}",
      "list = [1, 2, 3]",
      "list = (1, 2, 3)",
      "list = <1, 2, 3>"
    ],
    "answer": "list = [1, 2, 3]",
    "explanation": "Списки в Python создаются с использованием квадратных скобок `[]`."
  },
  "7": {
    "question": "Что выведет print(len('Python'))?",
    "options": [
      "5",
      "6",
      "7",
      "Ошибка"
    ],
    "answer": "6",
    "explanation": "Функция `len()` возвращает количество символов в строке 'Python', которое равно 6."
  },
  "8": {
    "question": "Какой оператор используется для возведения в степень?",
    "options": [
      "^",
      "**",
      "pow",
      "*"
    ],
    "answer": "**",
    "explanation": "Оператор `**` используется для возведения числа в степень (например, `2**3` будет 8)."
  },
  "9": {
    "question": "Что выведет print(10 // 3)?",
    "options": [
      "3.33",
      "3",
      "4",
      "1"
    ],
    "answer": "3",
    "explanation": "Оператор `//` выполняет целочисленное деление, отбрасывая дробную часть."
  },
  "10": {
    "question": "Как объявить переменную в Python?",
    "options": [
      "var x = 5",
      "int x = 5",
      "x = 5",
      "declare x = 5"
    ],
    "answer": "x = 5",
    "explanation": "В Python переменные объявляются простым присваиванием значения."
  },
  "11": {
    "question": "Что выведет print(True and False)?",
    "options": [
      "True",
      "False",
      "1",
      "0"
    ],
    "answer": "False",
    "explanation": "Логический оператор `and` возвращает `True`, если оба операнда `True`, иначе `False`."
  },
  "12": {
    "question": "Какая функция используется для получения ввода от пользователя?",
    "options": [
      "input()",
      "get()",
      "read()",
      "scan()"
    ],
    "answer": "input()",
    "explanation": "Функция `input()` используется для получения строкового ввода от пользователя."
  },
  "13": {
    "question": "Что выведет print(5 % 2)?",
    "options": [
      "2.5",
      "2",
      "1",
      "0"
    ],
    "answer": "1",
    "explanation": "Оператор `%` возвращает остаток от деления. 5 по модулю 2 равно 1."
  },
  "14": {
    "question": "Как записать условие if в Python?",
    "options": [
      "if (x == 5):",
      "if x == 5:",
      "if x = 5:",
      "if x === 5:"
    ],
    "answer": "if x == 5:",
    "explanation": "Условие `if` в Python записывается без круглых скобок вокруг условия и с двоеточием в конце."
  },
  "15": {
    "question": "Что выведет print('Python'[0])?",
    "options": [
      "P",
      "y",
      "Python",
      "Ошибка"
    ],
    "answer": "P",
    "explanation": "Строки в Python являются индексируемыми, и `[0]` обращается к первому символу (индекс 0)."
  },
  "16": {
    "question": "Какой цикл используется для итерации по списку?",
    "options": [
      "while",
      "for",
      "loop",
      "foreach"
    ],
    "answer": "for",
    "explanation": "Цикл `for` чаще всего используется для итерации по элементам списка или других итерируемых объектов."
  },
  "17": {
    "question": "Что выведет print(bool(0))?",
    "options": [
      "True",
      "False",
      "0",
      "None"
    ],
    "answer": "False",
    "explanation": "В Python число 0, пустые строки, пустые списки и словари считаются 'ложными' (False) в булевом контексте."
  },
  "18": {
    "question": "Как добавить элемент в конец списка?",
    "options": [
      "list.add(item)",
      "list.append(item)",
      "list.insert(item)",
      "list.push(item)"
    ],
    "answer": "list.append(item)",
    "explanation": "Метод `append()` добавляет элемент в конец списка."
  },
  "19": {
    "question": "Что выведет print(range(3))?",
    "options": [
      "[0, 1, 2]",
      "range(0, 3)",
      "(0, 1, 2)",
      "0 1 2"
    ],
    "answer": "range(0, 3)",
    "explanation": "Функция `range()` возвращает объект `range`, а не сам список. Чтобы получить список, нужно явно преобразовать его, например, `list(range(3))`."
  },
  "20": {
    "question": "Как создать словарь в Python?",
    "options": [
      "dict = [key: value]",
      "dict = {key: value}",
      "dict = (key: value)",
      "dict = <key: value>"
    ],
    "answer": "dict = {key: value}",
    "explanation": "Словари в Python создаются с использованием фигурных скобок `{}` и пар ключ-значение."
  },
  "21": {
    "question": "Что выведет print([1, 2, 3] + [4, 5])?",
    "options": [
      "[1, 2, 3, 4, 5]",
      "[5, 7, 8]",
      "[[1, 2, 3], [4, 5]]",
      "Ошибка"
    ],
    "answer": "[1, 2, 3, 4, 5]",
    "explanation": "Оператор `+` применительно к спискам выполняет их конкатенацию (объединение)."
  },
  "22": {
    "question": "Какое ключевое слово используется для определения функции?",
    "options": [
      "function",
      "def",
      "func",
      "define"
    ],
    "answer": "def",
    "explanation": "Ключевое слово `def` используется для определения функции в Python."
  },
  "23": {
    "question": "Что выведет print('Hello'[1:4])?",
    "options": [
      "ell",
      "ello",
      "Hel",
      "Hell"
    ],
    "answer": "ell",
    "explanation": "Срезы строк в Python включают начальный индекс, но исключают конечный. `[1:4]` означает символы с индексами 1, 2, 3."
  },
  "24": {
    "question": "Как проверить, есть ли элемент в списке?",
    "options": [
      "element exists list",
      "element in list",
      "list.contains(element)",
      "list.has(element)"
    ],
    "answer": "element in list",
    "explanation": "Оператор `in` используется для проверки наличия элемента в коллекции."
  },
  "25": {
    "question": "Что выведет print(not True)?",
    "options": [
      "True",
      "False",
      "None",
      "Ошибка"
    ],
    "answer": "False",
    "explanation": "Логический оператор `not` инвертирует булево значение."
  },
  "26": {
    "question": "Как получить длину списка?",
    "options": [
      "list.length()",
      "len(list)",
      "list.size()",
      "length(list)"
    ],
    "answer": "len(list)",
    "explanation": "Функция `len()` возвращает количество элементов в списке."
  },
  "27": {
    "question": "Что выведет print(int('10'))?",
    "options": [
      "10",
      "'10'",
      "10.0",
      "Ошибка"
    ],
    "answer": "10",
    "explanation": "Функция `int()` преобразует строку в целое число."
  },
  "28": {
    "question": "Какой метод используется для разделения строки?",
    "options": [
      "string.divide()",
      "string.split()",
      "string.separate()",
      "string.break()"
    ],
    "answer": "string.split()",
    "explanation": "Метод `split()` используется для разделения строки на список подстрок."
  },
  "29": {
    "question": "Что выведет print([1, 2, 3] * 2)?",
    "options": [
      "[2, 4, 6]",
      "[1, 2, 3, 1, 2, 3]",
      "[[1, 2, 3], [1, 2, 3]]",
      "Ошибка"
    ],
    "answer": "[1, 2, 3, 1, 2, 3]",
    "explanation": "Оператор `*` применительно к списку и целому числу повторяет список указанное количество раз."
  },
  "30": {
    "question": "Как создать пустой список?",
    "options": [
      "list = []",
      "list = {}",
      "list = ()",
      "list = null"
    ],
    "answer": "list = []",
    "explanation": "Пустой список создается пустыми квадратными скобками `[]`."
  },
  "31": {
    "question": "Что выведет print('Python'.upper())?",
    "options": [
      "python",
      "PYTHON",
      "Python",
      "PyThOn"
    ],
    "answer": "PYTHON",
    "explanation": "Метод `upper()` возвращает копию строки, переведенную в верхний регистр."
  },
  "32": {
    "question": "Какой оператор используется для проверки неравенства?",
    "options": [
      "<>",
      "!=",
      "=/=",
      "not ="
    ],
    "answer": "!=",
    "explanation": "Оператор `!=` используется для проверки неравенства двух значений."
  },
  "33": {
    "question": "Что выведет print(list(range(1, 4)))?",
    "options": [
      "[1, 2, 3, 4]",
      "[1, 2, 3]",
      "[0, 1, 2, 3]",
      "[2, 3, 4]"
    ],
    "answer": "[1, 2, 3]",
    "explanation": "Функция `range(start, stop)` генерирует последовательность чисел от `start` (включительно) до `stop` (исключительно). `list()` преобразует это в список."
  },
  "34": {
    "question": "Как удалить элемент из списка по индексу?",
    "options": [
      "list.delete(index)",
      "del list[index]",
      "list.remove(index)",
      "list.pop(index)"
    ],
    "answer": "del list[index]",
    "explanation": "Оператор `del` используется для удаления элемента по указанному индексу."
  },
  "35": {
    "question": "Что выведет print('Hello' * 3)?",
    "options": [
      "HelloHelloHello",
      "Hello Hello Hello",
      "Hello * 3",
      "HHHeeellllllooo"
    ],
    "answer": "HelloHelloHello",
    "explanation": "Оператор `*` применительно к строке и целому числу повторяет строку указанное количество раз."
  },
  "36": {
    "question": "Какое значение возвращает функция по умолчанию, если не указан return?",
    "options": [
      "0",
      "False",
      "None",
      "Пустая строка"
    ],
    "answer": "None",
    "explanation": "Если функция в Python не имеет оператора `return`, она неявно возвращает `None`."
  },
  "37": {
    "question": "Что выведет print({'a': 1, 'b': 2}['a'])?",
    "options": [
      "a",
      "1",
      "{'a': 1}",
      "Ошибка"
    ],
    "answer": "1",
    "explanation": "Доступ к значениям в словаре осуществляется по ключу в квадратных скобках."
  },
  "38": {
    "question": "Как создать кортеж в Python?",
    "options": [
      "tuple = [1, 2, 3]",
      "tuple = (1, 2, 3)",
      "tuple = {1, 2, 3}",
      "tuple = <1, 2, 3>"
    ],
    "answer": "tuple = (1, 2, 3)",
    "explanation": "Кортежи в Python создаются с использованием круглых скобок `()`."
  },
  "39": {
    "question": "Что выведет print(5 == '5')?",
    "options": [
      "True",
      "False",
      "5",
      "Ошибка"
    ],
    "answer": "False",
    "explanation": "Оператор `==` сравнивает значения и типы данных. Число `5` и строка `'5'` имеют разные типы."
  },
  "40": {
    "question": "Какой метод используется для объединения элементов списка в строку?",
    "options": [
      "list.join()",
      "''.join(list)",
      "join(list)",
      "list.concat()"
    ],
    "answer": "''.join(list)",
    "explanation": "Метод `join()` вызывается на строке-разделителе и принимает итерируемый объект (например, список строк) для объединения его элементов."
  },
  "41": {
    "question": "Что выведет print([1, 2, 3][-1])?",
    "options": [
      "1",
      "2",
      "3",
      "Ошибка"
    ],
    "answer": "3",
    "explanation": "Отрицательный индекс `-1` в списке указывает на последний элемент."
  },
  "42": {
    "question": "Как проверить тип переменной?",
    "options": [
      "typeof(var)",
      "type(var)",
      "var.type()",
      "gettype(var)"
    ],
    "answer": "type(var)",
    "explanation": "Функция `type()` возвращает тип объекта."
  },
  "43": {
    "question": "Что выведет print('abc' > 'abd')?",
    "options": [
      "True",
      "False",
      "abc",
      "Ошибка"
    ],
    "answer": "False",
    "explanation": "Сравнение строк в Python происходит лексикографически (посимвольно). 'c' стоит до 'd'."
  },
  "44": {
    "question": "Какая функция используется для получения максимального значения?",
    "options": [
      "maximum()",
      "max()",
      "largest()",
      "biggest()"
    ],
    "answer": "max()",
    "explanation": "Функция `max()` возвращает наибольший элемент из переданных аргументов или из итерируемого объекта."
  },
  "45": {
    "question": "Что выведет print(bool(''))?",
    "options": [
      "True",
      "False",
      "''",
      "None"
    ],
    "answer": "False",
    "explanation": "Пустая строка в Python является 'ложным' (False) значением в булевом контексте."
  },
  "46": {
    "question": "Как создать множество в Python?",
    "options": [
      "set = [1, 2, 3]",
      "set = (1, 2, 3)",
      "set = {1, 2, 3}",
      "set = <1, 2, 3>"
    ],
    "answer": "set = {1, 2, 3}",
    "explanation": "Множества в Python создаются с использованием фигурных скобок `{}` (за исключением пустого множества, которое создается как `set()`)."
  },
  "47": {
    "question": "Что выведет print(10 / 3)?",
    "options": [
      "3",
      "3.0",
      "3.333333333333333",
      "3.33"
    ],
    "answer": "3.333333333333333",
    "explanation": "Оператор `/` в Python 3.x выполняет деление с плавающей точкой, возвращая точное значение."
  },
  "48": {
    "question": "Какое ключевое слово используется для обработки исключений?",
    "options": [
      "catch",
      "except",
      "error",
      "handle"
    ],
    "answer": "except",
    "explanation": "Ключевое слово `except` используется в блоках `try-except` для обработки исключений."
  },
  "49": {
    "question": "Что выведет print([x for x in range(3)])?",
    "options": [
      "[0, 1, 2]",
      "[1, 2, 3]",
      "range(3)",
      "[x, x, x]"
    ],
    "answer": "[0, 1, 2]",
    "explanation": "Это списковое включение (list comprehension), которое создает список из чисел, генерируемых `range(3)` (0, 1, 2)."
  },
  "50": {
    "question": "Как импортировать модуль в Python?",
    "options": [
      "include module",
      "import module",
      "require module",
      "use module"
    ],
    "answer": "import module",
    "explanation": "Ключевое слово `import` используется для импорта модулей."
  },
  "51": {
    "question": "Что выведет print(sum([1, 2, 3, 4]))?",
    "options": [
      "1234",
      "10",
      "[1, 2, 3, 4]",
      "Ошибка"
    ],
    "answer": "10",
    "explanation": "Функция `sum()` возвращает сумму всех элементов в итерируемом объекте."
  },
  "52": {
    "question": "Какой метод используется для добавления элемента в множество?",
    "options": [
      "set.append()",
      "set.add()",
      "set.insert()",
      "set.push()"
    ],
    "answer": "set.add()",
    "explanation": "Метод `add()` используется для добавления элемента в множество. Множества не поддерживают `append()` или `insert()`."
  },
  "53": {
    "question": "Что выведет print('Python'[::-1])?",
    "options": [
      "nohtyP",
      "Python",
      "nythoP",
      "Ошибка"
    ],
    "answer": "nohtyP",
    "explanation": "Срез `[::-1]` используется для реверсирования последовательности (в данном случае строки)."
  },
  "54": {
    "question": "Какая функция используется для сортировки списка?",
    "options": [
      "list.sort()",
      "sort(list)",
      "list.order()",
      "order(list)"
    ],
    "answer": "list.sort()",
    "explanation": "Метод `sort()` сортирует список на месте (изменяет сам список)."
  },
  "55": {
    "question": "Что выведет print(any([False, True, False]))?",
    "options": [
      "True",
      "False",
      "[False, True, False]",
      "None"
    ],
    "answer": "True",
    "explanation": "Функция `any()` возвращает `True`, если хотя бы один элемент в итерируемом объекте является истинным (True)."
  },
  "56": {
    "question": "Как получить ключи словаря?",
    "options": [
      "dict.keys()",
      "keys(dict)",
      "dict.getKeys()",
      "dict.key_list()"
    ],
    "answer": "dict.keys()",
    "explanation": "Метод `keys()` возвращает представление ключей словаря."
  },
  "57": {
    "question": "Что выведет print(round(3.7))?",
    "options": [
      "3",
      "4",
      "3.0",
      "4.0"
    ],
    "answer": "4",
    "explanation": "Функция `round()` округляет число до ближайшего целого. В Python 3.x `round()` округляет до ближайшего четного числа при половинных значениях, но 3.7 округляется до 4."
  },
  "58": {
    "question": "Какое ключевое слово используется для создания класса?",
    "options": [
      "class",
      "Class",
      "object",
      "struct"
    ],
    "answer": "class",
    "explanation": "Ключевое слово `class` используется для определения класса."
  },
  "59": {
    "question": "Что выведет print(enumerate(['a', 'b', 'c']))?",
    "options": [
      "[(0, 'a'), (1, 'b'), (2, 'c')]",
      "<enumerate object at ...>",
      "['a', 'b', 'c']",
      "[0, 1, 2]"
    ],
    "answer": "<enumerate object at ...>",
    "explanation": "Функция `enumerate()` возвращает объект-итератор `enumerate`. Чтобы увидеть его содержимое, нужно преобразовать его в список, например `list(enumerate(...))`."
  },
  "60": {
    "question": "Как создать lambda функцию для возведения в квадрат?",
    "options": [
      "lambda x: x^2",
      "lambda x: x**2",
      "lambda x: x*x",
      "lambda x: pow(x, 2)"
    ],
    "answer": "lambda x: x**2",
    "explanation": "Лямбда-функции - это небольшие анонимные функции. `x**2` - это оператор возведения в степень."
  },
  "61": {
    "question": "Что выведет print(all([True, True, False]))?",
    "options": [
      "True",
      "False",
      "[True, True, False]",
      "None"
    ],
    "answer": "False",
    "explanation": "Функция `all()` возвращает `True`, если все элементы в итерируемом объекте являются истинными (True)."
  },
  "62": {
    "question": "Какой метод используется для получения элемента словаря с значением по умолчанию?",
    "options": [
      "dict.get(key, default)",
      "dict.fetch(key, default)",
      "dict.retrieve(key, default)",
      "dict[key] or default"
    ],
    "answer": "dict.get(key, default)",
    "explanation": "Метод `get()` позволяет получить значение по ключу, а если ключ не найден, вернуть указанное значение по умолчанию вместо ошибки `KeyError`."
  },
  "63": {
    "question": "Что выведет print(zip([1, 2], ['a', 'b']))?",
    "options": [
      "[(1, 'a'), (2, 'b')]",
      "<zip object at ...>",
      "[1, 2, 'a', 'b']",
      "[[1, 'a'], [2, 'b']]"
    ],
    "answer": "<zip object at ...>",
    "explanation": "Функция `zip()` возвращает объект-итератор `zip`. Чтобы увидеть его содержимое, нужно преобразовать его в список, например `list(zip(...))`."
  },
  "64": {
    "question": "Какой метод используется для копирования списка?",
    "options": [
      "list.copy()",
      "copy(list)",
      "list.clone()",
      "list.duplicate()"
    ],
    "answer": "list.copy()",
    "explanation": "Метод `copy()` создает поверхностную копию списка."
  },
  "65": {
    "question": "Что выведет print(filter(lambda x: x > 2, [1, 2, 3, 4]))?",
    "options": [
      "[3, 4]",
      "<filter object at ...>",
      "[1, 2, 3, 4]",
      "[False, False, True, True]"
    ],
    "answer": "<filter object at ...>",
    "explanation": "Функция `filter()` возвращает объект-итератор `filter`. Чтобы увидеть его содержимое, нужно преобразовать его в список, например `list(filter(...))`."
  },
  "66": {
    "question": "Как обратиться к атрибуту объекта?",
    "options": [
      "object->attribute",
      "object.attribute",
      "object[attribute]",
      "object::attribute"
    ],
    "answer": "object.attribute",
    "explanation": "Доступ к атрибутам объекта осуществляется с использованием оператора `.` (точка)."
  },
  "67": {
    "question": "Что выведет print(map(str, [1, 2, 3]))?",
    "options": [
      "['1', '2', '3']",
      "<map object at ...>",
      "[1, 2, 3]",
      "str([1, 2, 3])"
    ],
    "answer": "<map object at ...>",
    "explanation": "Функция `map()` возвращает объект-итератор `map`. Чтобы увидеть его содержимое, нужно преобразовать его в список, например `list(map(...))`."
  },
  "68": {
    "question": "Какой декоратор используется для создания статического метода?",
    "options": [
      "@static",
      "@staticmethod",
      "@classmethod",
      "@method"
    ],
    "answer": "@staticmethod",
    "explanation": "Декоратор `@staticmethod` используется для определения статического метода в классе, который не получает ссылку на экземпляр класса или сам класс."
  },
  "69": {
    "question": "Что выведет print({1, 2, 3} & {2, 3, 4})?",
    "options": [
      "{1, 2, 3, 4}",
      "{2, 3}",
      "{1, 4}",
      "Ошибка"
    ],
    "answer": "{2, 3}",
    "explanation": "Оператор `&` для множеств выполняет операцию пересечения (находит общие элементы)."
  },
  "70": {
    "question": "Как создать генератор в Python?",
    "options": [
      "def gen(): return x",
      "def gen(): yield x",
      "def gen(): generate x",
      "def gen(): produce x"
    ],
    "answer": "def gen(): yield x",
    "explanation": "Генераторы в Python создаются с использованием ключевого слова `yield` вместо `return`."
  },
  "71": {
    "question": "Что выведет print(isinstance([], list))?",
    "options": [
      "True",
      "False",
      "list",
      "[]"
    ],
    "answer": "True",
    "explanation": "Функция `isinstance()` проверяет, является ли объект экземпляром указанного класса (или его подкласса)."
  },
  "72": {
    "question": "Какой метод используется для обновления словаря?",
    "options": [
      "dict.update()",
      "dict.merge()",
      "dict.add()",
      "dict.extend()"
    ],
    "answer": "dict.update()",
    "explanation": "Метод `update()` используется для объединения одного словаря с другим или для добавления пар ключ-значение."
  },
  "73": {
    "question": "Что выведет print(hasattr([], 'append'))?",
    "options": [
      "True",
      "False",
      "append",
      "None"
    ],
    "answer": "True",
    "explanation": "Функция `hasattr()` проверяет, имеет ли объект указанный атрибут (метод или свойство)."
  },
  "74": {
    "question": "Как создать декоратор функции?",
    "options": [
      "def decorator(func): return func",
      "@decorator def func():",
      "decorator(func)",
      "func.decorator()"
    ],
    "answer": "def decorator(func): return func",
    "explanation": "Декоратор - это функция, которая принимает другую функцию в качестве аргумента, расширяет ее функциональность и возвращает новую функцию. Первый вариант ответа представляет базовую структуру декоратора."
  },
  "75": {
    "question": "Что выведет print(getattr([], 'count', 0))?",
    "options": [
      "0",
      "<built-in method count>",
      "count",
      "None"
    ],
    "answer": "<built-in method count>",
    "explanation": "Функция `getattr()` возвращает значение именованного атрибута объекта. Если атрибут не найден, возвращается значение по умолчанию (0 в данном случае), но 'count' является существующим методом списка, поэтому возвращается ссылка на него."
  },
  "76": {
    "question": "Какой метод используется для создания копии объекта?",
    "options": [
      "copy.copy()",
      "object.copy()",
      "clone(object)",
      "duplicate(object)"
    ],
    "answer": "copy.copy()",
    "explanation": "Модуль `copy` предоставляет функции `copy.copy()` для поверхностного копирования и `copy.deepcopy()` для глубокого копирования."
  },
  "77": {
    "question": "Что выведет print(callable(lambda: None))?",
    "options": [
      "True",
      "False",
      "lambda",
      "None"
    ],
    "answer": "True",
    "explanation": "Функция `callable()` проверяет, можно ли вызвать объект (т.е., является ли он функцией, методом, лямбда-функцией и т.д.)."
  },
  "78": {
    "question": "Как создать множественное наследование в Python?",
    "options": [
      "class Child(Parent1, Parent2):",
      "class Child extends Parent1, Parent2:",
      "class Child: Parent1, Parent2",
      "class Child(Parent1) and (Parent2):"
    ],
    "answer": "class Child(Parent1, Parent2):",
    "explanation": "Множественное наследование в Python реализуется путем перечисления базовых классов в скобках через запятую."
  },
  "79": {
    "question": "Что выведет print(vars({}).__class__)?",
    "options": [
      "<class 'dict'>",
      "<class 'vars'>",
      "<class 'object'>",
      "Ошибка"
    ],
    "answer": "<class 'dict'>",
    "explanation": "Функция `vars()` возвращает словарь атрибутов объекта `__dict__`. `vars({})` возвращает пустой словарь, а его класс - `dict`."
  },
  "80": {
    "question": "Какой метод используется для получения списка атрибутов объекта?",
    "options": [
      "dir(object)",
      "attrs(object)",
      "properties(object)",
      "methods(object)"
    ],
    "answer": "dir(object)",
    "explanation": "Функция `dir()` возвращает список допустимых атрибутов для объекта."
  },
  "81": {
    "question": "Что произойдет при выполнении next() на исчерпанном итераторе?",
    "options": [
      "Вернет None",
      "Вернет пустую строку",
      "Вызовет StopIteration",
      "Начнет сначала"
    ],
    "answer": "Вызовет StopIteration",
    "explanation": "Когда итератор исчерпан и нет больше элементов, вызов `next()` вызывает исключение `StopIteration`."
  },
  "82": {
    "question": "Какой дескриптор используется для создания свойства только для чтения?",
    "options": [
      "@property",
      "@readonly",
      "@getter",
      "@const"
    ],
    "answer": "@property",
    "explanation": "Декоратор `@property` позволяет превратить метод в свойство, а также определить геттеры, сеттеры и делитеры."
  },
  "83": {
    "question": "Что выведет print(id([]) == id([]))?",
    "options": [
      "True",
      "False",
      "Зависит от реализации",
      "Ошибка"
    ],
    "answer": "False",
    "explanation": "Функция `id()` возвращает уникальный идентификатор объекта. Два разных пустых списка являются двумя разными объектами в памяти, поэтому их `id` будут отличаться."
  },
  "84": {
    "question": "Какой метод вызывается при использовании оператора + для объектов?",
    "options": [
      "__add__",
      "__plus__",
      "__sum__",
      "__combine__"
    ],
    "answer": "__add__",
    "explanation": "Магический метод `__add__` вызывается при использовании оператора `+` для экземпляров класса. Это позволяет перегружать операторы."
  },
  "85": {
    "question": "Что такое GIL в Python?",
    "options": [
      "Global Import Lock",
      "Global Interpreter Lock",
      "General Interface Layer",
      "Generic Input Library"
    ],
    "answer": "Global Interpreter Lock",
    "explanation": "GIL (Global Interpreter Lock) - это механизм, используемый в CPython, который гарантирует, что только один поток может выполнять байт-код Python в данный момент времени, даже в многоядерной системе."
  },
  "86": {
    "question": "Какой метод используется для создания контекстного менеджера?",
    "options": [
      "__enter__ и __exit__",
      "__start__ и __stop__",
      "__begin__ и __end__",
      "__open__ и __close__"
    ],
    "answer": "__enter__ и __exit__",
    "explanation": "Контекстные менеджеры (используемые с оператором `with`) должны реализовывать методы `__enter__()` и `__exit__()`."
  },
  "87": {
    "question": "Что выведет print(type(type))?",
    "options": [
      "<class 'type'>",
      "<class 'object'>",
      "<class 'class'>",
      "<class 'meta'>"
    ],
    "answer": "<class 'type'>",
    "explanation": "`type` сам по себе является классом, и его тип тоже `type`. Это концепция метаклассов."
  },
  "88": {
    "question": "Какой модуль используется для работы с регулярными выражениями?",
    "options": [
      "regex",
      "re",
      "regexp",
      "pattern"
    ],
    "answer": "re",
    "explanation": "Стандартный модуль Python для работы с регулярными выражениями - `re`."
  },
  "89": {
    "question": "Что такое monkey patching в Python?",
    "options": [
      "Отладка кода",
      "Динамическое изменение классов/модулей",
      "Тестирование производительности",
      "Обфускация кода"
    ],
    "answer": "Динамическое изменение классов/модулей",
    "explanation": "Monkey patching - это техника динамического изменения или расширения кода класса или модуля во время выполнения."
  },
  "90": {
    "question": "Какой метод используется для создания собственного итератора?",
    "options": [
      "__iter__ и __next__",
      "__iterate__ и __step__",
      "__loop__ и __advance__",
      "__start__ и __continue__"
    ],
    "answer": "__iter__ и __next__",
    "explanation": "Для создания собственного итерируемого объекта (который можно использовать в цикле `for`), класс должен реализовывать методы `__iter__()` (возвращает итератор) и `__next__()` (возвращает следующий элемент)."
  },
  "91": {
    "question": "Что выведет print([] is [])?",
    "options": [
      "True",
      "False",
      "None",
      "Ошибка"
    ],
    "answer": "False",
    "explanation": "Оператор `is` проверяет идентичность объектов (то есть, указывают ли они на одно и то же место в памяти). `[]` и `[]` создают два разных объекта."
  },
  "92": {
    "question": "Какой дескриптор используется для слабых ссылок?",
    "options": [
      "weakref",
      "softref",
      "lightref",
      "tempref"
    ],
    "answer": "weakref",
    "explanation": "Модуль `weakref` предоставляет функциональность для создания слабых ссылок на объекты. Слабые ссылки не увеличивают счетчик ссылок на объект, позволяя ему быть сборщику мусора, если на него нет других сильных ссылок."
  },
  "93": {
    "question": "Что такое MRO в Python?",
    "options": [
      "Memory Reference Order",
      "Method Resolution Order",
      "Module Runtime Options",
      "Multiple Return Objects"
    ],
    "answer": "Method Resolution Order",
    "explanation": "MRO (Method Resolution Order) - это порядок, в котором Python ищет методы и атрибуты в иерархии наследования классов."
  },
  "94": {
    "question": "Какой метод вызывается при обращении к несуществующему атрибуту?",
    "options": [
      "__getattr__",
      "__missing__",
      "__notfound__",
      "__default__"
    ],
    "answer": "__getattr__",
    "explanation": "Магический метод `__getattr__` вызывается, когда происходит попытка доступа к атрибуту, который не был найден обычным способом."
  },
  "95": {
    "question": "Что такое coroutine в Python?",
    "options": [
      "Подпрограмма",
      "Функция, которая может приостанавливать выполнение",
      "Многопоточная функция",
      "Вложенная функция"
    ],
    "answer": "Функция, которая может приостанавливать выполнение",
    "explanation": "Корутины (coroutine) - это функции, которые могут приостанавливать свое выполнение и возобновлять его позднее, что позволяет реализовывать асинхронное программирование."
  },
  "96": {
    "question": "Какой оператор используется для асинхронного ожидания?",
    "options": [
      "wait",
      "await",
      "async",
      "yield"
    ],
    "answer": "await",
    "explanation": "Оператор `await` используется внутри асинхронных функций для ожидания завершения корутин или других 'awaitable' объектов."
  },
  "97": {
    "question": "Что такое metaclass в Python?",
    "options": [
      "Класс классов",
      "Абстрактный класс",
      "Наследуемый класс",
      "Вложенный класс"
    ],
    "answer": "Класс классов",
    "explanation": "Метакласс (metaclass) - это класс, экземплярами которого являются другие классы. Он контролирует создание классов."
  },
  "98": {
    "question": "Какой метод используется для настройки создания экземпляра класса?",
    "options": [
      "__init__",
      "__new__",
      "__create__",
      "__build__"
    ],
    "answer": "__new__",
    "explanation": "Магический метод `__new__` вызывается для создания нового экземпляра класса до того, как будет вызван `__init__` для его инициализации."
  },
  "99": {
    "question": "Что такое descriptor protocol в Python?",
    "options": [
      "Протокол для описания объектов",
      "Протокол для управления доступом к атрибутам",
      "Протокол для сериализации",
      "Протокол для наследования"
    ],
    "answer": "Протокол для управления доступом к атрибутам",
    "explanation": "Протокол дескрипторов в Python позволяет объектам (дескрипторам) управлять доступом к атрибутам другого объекта. Он реализуется с помощью методов `__get__`, `__set__` и `__delete__`."
  }
}